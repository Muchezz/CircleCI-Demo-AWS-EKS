# jobs:
#   deploy-application:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#       docker-image-name:
#         description: |
#           Name of the docker image to be deployed
#         type: string
#       version-info:
#         description: |
#           App version information
#         type: string
#       aws-region:
#         description: |
#           AWS region
#         type: string
#         default: ""
#     steps:
#       - checkout
#       - run:
#           name: Create deployment manifest
#           command: |
#             # Replace the placeholders in the manifest with the intended values.
#             # This is to avoid hardcoding the image name in the manifest, to make this
#             # demo project more portable.
#             BUILD_DATE=$(date '+%Y%m%d%H%M%S')
#             cat deployment/demo-app-deployment.yaml.template |\
#                sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
#                 g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
#                 << parameters.version-info >>|g" > deployment/demo-app-deployment.yaml
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#           aws-region: << parameters.aws-region >>
#       - kubernetes/create-or-update-resource:
#           resource-file-path: "deployment/demo-app-deployment.yaml"
#           get-rollout-status: true
#           resource-name: deployment/demoapp
#       - kubernetes/create-or-update-resource:
#           resource-file-path: "deployment/demo-app-service.yaml"
#   test-application:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#       aws-region:
#         description: |
#           AWS region
#         type: string
#         default: ""
#       expected-version-info:
#         description: |
#           Expected app version (this is used for testing that the
#           correct version has been deployed)
#         type: string
#     steps:
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#           aws-region: << parameters.aws-region >>
#       - run:
#           name: Wait for service to be ready
#           command: |
#             kubectl get pods
#             kubectl get services
#             sleep 30
#             for attempt in {1..20}; do
#               EXTERNAL_IP=$(kubectl get service demoapp | awk '{print $4}' | tail -n1)
#               echo "Checking external IP: ${EXTERNAL_IP}"
#               if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
#                 break
#               fi
#               echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
#               sleep 10
#             done
#             sleep 180
#             curl -s --retry 10 "http://$EXTERNAL_IP" | grep "<< parameters.expected-version-info >>"
#   undeploy-application:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#       aws-region:
#         description: |
#           AWS region
#         type: string
#         default: ""
#     steps:
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#           aws-region: << parameters.aws-region >>
#       - kubernetes/delete-resource:
#           resource-types: "deployment,service"
#           label-selector: "app=demo"
#           wait: true
#       - run:
#           name: Check on pod status
#           command: |
#             kubectl get pods

# version: 2.1
# orbs:
#   aws-eks: circleci/aws-eks@0.2.3
#   kubernetes: circleci/kubernetes@0.4.0
#   aws-ecr: circleci/aws-ecr@7.2.0

# workflows:
#   deployment:
#     jobs:
#       - aws-ecr/build-and-push-image:
#           account-url: AWS_ECR_URL
#           repo: eks_orb_demo_app
#           dockerfile: Dockerfile
#           path: demo_app
#           tag: ${CIRCLE_SHA1}
#           # Uncomment if the repository does not yet exist
#           # create-repo: true
#       - aws-eks/create-cluster:
#           cluster-name: eks-orb-demo-app-deployment
#           aws-region: $AWS_REGION
#           requires:
#             - aws-ecr/build-and-push-image
#       - deploy-application:
#           cluster-name: eks-orb-demo-app-deployment
#           aws-region: $AWS_REGION
#           docker-image-name: "${AWS_ECR_URL}/eks_orb_demo_app:${CIRCLE_SHA1}"
#           version-info: "${CIRCLE_SHA1}"
#           requires:
#             - aws-eks/create-cluster
#       - test-application:
#           name: test-application
#           cluster-name: eks-orb-demo-app-deployment
#           aws-region: $AWS_REGION
#           expected-version-info: "${CIRCLE_SHA1}"
#           requires:
#             - deploy-application
#       - undeploy-application:
#           cluster-name: eks-orb-demo-app-deployment
#           aws-region: $AWS_REGION
#           requires:
#             - test-application
#       - aws-eks/delete-cluster:
#           cluster-name: eks-orb-demo-app-deployment
#           aws-region: $AWS_REGION
#           wait: true
#           requires:
#             - undeploy-application

jobs:
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services && sleep 300
          name: Test cluster
    aws-eks/install-eksctl:
      steps:
          - run:
            name: Install the eksctl tool
            command: |
              if which eksctl > /dev/null; then
                echo "eksctl is already installed"
                exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
version: 2.1
workflows:
  deployment:
    jobs:
      - aws-eks/install-eksctl:
        requires:
          
      - aws-eks/create-cluster:
          cluster-name: my-eks-demo
          show-eksctl-command: true
      - test-cluster:
          cluster-name: my-eks-demo
          requires:
            - aws-eks/create-cluster
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
          requires:
            - test-cluster
